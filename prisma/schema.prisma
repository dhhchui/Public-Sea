generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                           Int             @id @default(autoincrement())
  username                                     String          @unique
  nickname                                     String          @unique
  email                                        String          @unique
  password                                     String
  bio                                          String?
  gender                                       String          @default("undisclosed")
  hobbies                                      String[]
  followerCount                                Int             @default(0)
  followedCount                                Int             @default(0)
  followerIds                                  Int[]
  followedIds                                  Int[]
  createdAt                                    DateTime        @default(now())
  resetPasswordToken                           String?
  resetPasswordExpires                         DateTime?
  friends                                      Int[]           @default([])
  isRedFlagged                                 Boolean         @default(false)
  rating                                       Int             @default(0)
  Block_Block_blockedIdToUser                  Block[]         @relation("Block_blockedIdToUser")
  Block_Block_blockerIdToUser                  Block[]         @relation("Block_blockerIdToUser")
  comments                                     Comment[]       @relation("UserComments")
  conversationsAsUser1                         Conversation[]  @relation("User1Conversations")
  conversationsAsUser2                         Conversation[]  @relation("User2Conversations")
  FriendRequest_FriendRequest_receiverIdToUser FriendRequest[] @relation("FriendRequest_receiverIdToUser")
  FriendRequest_FriendRequest_senderIdToUser   FriendRequest[] @relation("FriendRequest_senderIdToUser")
  likes                                        Like[]
  messages                                     Message[]
  posts                                        Post[]          @relation("UserPosts")
  UserRating_UserRating_ratedUserIdToUser      UserRating[]    @relation("UserRating_ratedUserIdToUser")
  UserRating_UserRating_raterIdToUser          UserRating[]    @relation("UserRating_raterIdToUser")
}

model Conversation {
  id        Int       @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime  @default(now())
  user1     User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2     User      @relation("User2Conversations", fields: [user2Id], references: [id])
  messages  Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  senderId       Int
  conversationId Int
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])

  @@index([createdAt])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@index([createdAt])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    Int
  itemType  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, itemId, itemType])
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  posts     Post[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  likeCount Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  view      BigInt    @default(0)
  boardId   Int
  comments  Comment[]
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  board     Board     @relation(fields: [boardId], references: [id])

  @@index([createdAt])
}

model Block {
  id                         Int      @id @default(autoincrement())
  blockerId                  Int
  blockedId                  Int
  createdAt                  DateTime @default(now())
  User_Block_blockedIdToUser User     @relation("Block_blockedIdToUser", fields: [blockedId], references: [id])
  User_Block_blockerIdToUser User     @relation("Block_blockerIdToUser", fields: [blockerId], references: [id])

  @@unique([blockerId, blockedId])
}

model FriendRequest {
  id                                  Int      @id @default(autoincrement())
  senderId                            Int
  receiverId                          Int
  status                              String   @default("pending")
  createdAt                           DateTime @default(now())
  updatedAt                           DateTime
  User_FriendRequest_receiverIdToUser User     @relation("FriendRequest_receiverIdToUser", fields: [receiverId], references: [id])
  User_FriendRequest_senderIdToUser   User     @relation("FriendRequest_senderIdToUser", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model UserRating {
  id                                Int      @id @default(autoincrement())
  raterId                           Int
  ratedUserId                       Int
  rating                            Int
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime
  User_UserRating_ratedUserIdToUser User     @relation("UserRating_ratedUserIdToUser", fields: [ratedUserId], references: [id])
  User_UserRating_raterIdToUser     User     @relation("UserRating_raterIdToUser", fields: [raterId], references: [id])

  @@unique([raterId, ratedUserId])
}
