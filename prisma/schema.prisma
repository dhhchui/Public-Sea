generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conversation {
  id           Int         @id @default(autoincrement())
  user1Id      Int
  user2Id      Int
  user1        User        @relation("User1Conversations", fields: [user1Id], references: [id])
  user2        User        @relation("User2Conversations", fields: [user2Id], references: [id])
  messages     Message[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([user1Id, user2Id]) // 添加複合索引
}

model Message {
  id            Int         @id @default(autoincrement())
  content       String
  senderId      Int
  conversationId Int
  createdAt     DateTime    @default(now())
  sender        User        @relation("UserMessages", fields: [senderId], references: [id])
  conversation  Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt]) // 添加 createdAt 索引
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@index([createdAt])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    Int
  itemType  String
  createdAt DateTime @default(now())
  user      User     @relation("UserLikes", fields: [userId], references: [id])

  @@unique([userId, itemId, itemType])
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  likeCount Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  view      BigInt    @default(0)
  boardId   Int
  board     Board     @relation(fields: [boardId], references: [id])
  comments  Comment[]
  author    User      @relation("UserPosts", fields: [authorId], references: [id])

  @@index([createdAt])
}

model FriendRequest {
  id           Int      @id @default(autoincrement())
  senderId     Int
  receiverId   Int
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sender       User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver     User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model UserRating {
  id           Int      @id @default(autoincrement())
  raterId      Int
  ratedUserId  Int
  rating       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rater        User     @relation("GivenRatings", fields: [raterId], references: [id])
  ratedUser    User     @relation("ReceivedRatings", fields: [ratedUserId], references: [id])

  @@unique([raterId, ratedUserId])
}

model Block {
  id           Int      @id @default(autoincrement())
  blockerId    Int
  blockedId    Int
  createdAt    DateTime @default(now())
  blocker      User     @relation("Blocker", fields: [blockerId], references: [id])
  blocked      User     @relation("Blocked", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
}

model User {
  id                  Int              @id @default(autoincrement())
  username            String           @unique
  nickname            String           @unique
  email               String           @unique
  password            String
  bio                 String?
  gender              String           @default("undisclosed")
  hobbies             String[]
  followerCount       Int              @default(0)
  followedCount       Int              @default(0)
  followerIds         Int[]
  followedIds         Int[]
  friends             Int[]            @default([])
  rating              Int              @default(0)
  isRedFlagged        Boolean          @default(false)
  createdAt           DateTime         @default(now())
  resetPasswordToken  String?   
  resetPasswordExpires DateTime? 
  messages            Message[]        @relation("UserMessages")
  conversationsAsUser1 Conversation[]  @relation("User1Conversations")
  conversationsAsUser2 Conversation[]  @relation("User2Conversations")
  posts               Post[]           @relation("UserPosts")
  comments            Comment[]        @relation("UserComments")
  likes               Like[]           @relation("UserLikes")
  sentFriendRequests  FriendRequest[]  @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  givenRatings        UserRating[]     @relation("GivenRatings")
  receivedRatings     UserRating[]     @relation("ReceivedRatings")
  blockedUsers        Block[]          @relation("Blocker")
  blockedBy           Block[]          @relation("Blocked")
  notifications       Notification[]   @relation("UserNotifications")
  sentNotifications   Notification[]   @relation("SenderNotifications")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String  
  source    String?  
  relatedId Int      
  senderId  Int      
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  sender    User     @relation("SenderNotifications", fields: [senderId], references: [id])
}